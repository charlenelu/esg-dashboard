{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/lululu/RemoteWork/esg-dashboard/src/repositories/company-risk-overview/companyRiskOverviewRepository.ts"],"sourcesContent":["import { CompanyRiskOverview } from '@/types/company-risk-overview'\n\nexport class CompanyRiskOverviewRepository {\n  async findById(companyId: string): Promise<CompanyRiskOverview | null> {\n    try {\n      // 从本地 JSON 文件导入数据\n      const response = await import('../origin-data/company-risk-overview.json')\n      const data = response.default\n\n      // 模拟根据 companyId 查找数据\n      if (data.companyId !== companyId) {\n        return null\n      }\n\n      return data\n    } catch (error) {\n      console.error('Error in CompanyRiskOverviewRepository.findById:', error)\n      throw error\n    }\n  }\n\n  async findAll(): Promise<CompanyRiskOverview[]> {\n    try {\n      const response = await import('../origin-data/company-risk-overview.json')\n      return [response.default]\n    } catch (error) {\n      console.error('Error in CompanyRiskOverviewRepository.findAll:', error)\n      throw error\n    }\n  }\n}\n\nexport const companyRiskOverviewRepository = new CompanyRiskOverviewRepository() "],"names":[],"mappings":";;;;AAEO,MAAM;IACX,MAAM,SAAS,SAAiB,EAAuC;QACrE,IAAI;YACF,kBAAkB;YAClB,MAAM,WAAW;YACjB,MAAM,OAAO,SAAS,OAAO;YAE7B,sBAAsB;YACtB,IAAI,KAAK,SAAS,KAAK,WAAW;gBAChC,OAAO;YACT;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oDAAoD;YAClE,MAAM;QACR;IACF;IAEA,MAAM,UAA0C;QAC9C,IAAI;YACF,MAAM,WAAW;YACjB,OAAO;gBAAC,SAAS,OAAO;aAAC;QAC3B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mDAAmD;YACjE,MAAM;QACR;IACF;AACF;AAEO,MAAM,gCAAgC,IAAI","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///Users/lululu/RemoteWork/esg-dashboard/src/services/company-risk-overview/companyRiskOverviewService.ts"],"sourcesContent":["import { companyRiskOverviewRepository } from '@/repositories/company-risk-overview/companyRiskOverviewRepository'\nimport { RiskOverviewResponse } from './types'\nimport { format } from 'date-fns'\nimport { CompanyRiskOverview } from '@/types/company-risk-overview'\n\nexport class CompanyRiskOverviewService {\n  async getRiskOverview(companyId: string): Promise<RiskOverviewResponse> {\n    try {\n      const data = await companyRiskOverviewRepository.findById(companyId)\n      \n      if (!data) {\n        throw new Error('Company risk data not found')\n      }\n\n      return this.formatRiskData(data)\n    } catch (error) {\n      console.error('Error in CompanyRiskOverviewService.getRiskOverview:', error)\n      throw error\n    }\n  }\n\n  async getAllRiskOverviews(): Promise<RiskOverviewResponse[]> {\n    try {\n      const data = await companyRiskOverviewRepository.findAll()\n      return data.map((item: CompanyRiskOverview) => this.formatRiskData(item))\n    } catch (error) {\n      console.error('Error in CompanyRiskOverviewService.getAllRiskOverviews:', error)\n      throw error\n    }\n  }\n\n  private formatRiskData(data: CompanyRiskOverview): RiskOverviewResponse {\n    return {\n      ...data,\n      riskLevel: this.calculateRiskLevel(data.overallRiskScore),\n      lastUpdatedFormatted: format(new Date(data.lastUpdated), 'yyyy-MM-dd HH:mm:ss')\n    }\n  }\n\n  private calculateRiskLevel(score: number): 'low' | 'medium' | 'high' {\n    if (score < 40) return 'low'\n    if (score < 70) return 'medium'\n    return 'high'\n  }\n}\n\nexport const companyRiskOverviewService = new CompanyRiskOverviewService() "],"names":[],"mappings":";;;;AAAA;AAEA;;;AAGO,MAAM;IACX,MAAM,gBAAgB,SAAiB,EAAiC;QACtE,IAAI;YACF,MAAM,OAAO,MAAM,qLAAA,CAAA,gCAA6B,CAAC,QAAQ,CAAC;YAE1D,IAAI,CAAC,MAAM;gBACT,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO,IAAI,CAAC,cAAc,CAAC;QAC7B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wDAAwD;YACtE,MAAM;QACR;IACF;IAEA,MAAM,sBAAuD;QAC3D,IAAI;YACF,MAAM,OAAO,MAAM,qLAAA,CAAA,gCAA6B,CAAC,OAAO;YACxD,OAAO,KAAK,GAAG,CAAC,CAAC,OAA8B,IAAI,CAAC,cAAc,CAAC;QACrE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4DAA4D;YAC1E,MAAM;QACR;IACF;IAEQ,eAAe,IAAyB,EAAwB;QACtE,OAAO;YACL,GAAG,IAAI;YACP,WAAW,IAAI,CAAC,kBAAkB,CAAC,KAAK,gBAAgB;YACxD,sBAAsB,CAAA,GAAA,wJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,KAAK,WAAW,GAAG;QAC3D;IACF;IAEQ,mBAAmB,KAAa,EAA6B;QACnE,IAAI,QAAQ,IAAI,OAAO;QACvB,IAAI,QAAQ,IAAI,OAAO;QACvB,OAAO;IACT;AACF;AAEO,MAAM,6BAA6B,IAAI","debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///Users/lululu/RemoteWork/esg-dashboard/src/app/api/company-risk-overview/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { companyRiskOverviewService } from '@/services/company-risk-overview/companyRiskOverviewService'\n\n// GET /api/company-risk-overview\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const companyId = searchParams.get('companyId')\n\n    if (!companyId) {\n      return NextResponse.json(\n        { error: 'Company ID is required' },\n        { status: 400 }\n      )\n    }\n\n    const data = await companyRiskOverviewService.getRiskOverview(companyId)\n    return NextResponse.json(data)\n  } catch (error) {\n    console.error('Error fetching company risk overview:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,YAAY,aAAa,GAAG,CAAC;QAEnC,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,8KAAA,CAAA,6BAA0B,CAAC,eAAe,CAAC;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}